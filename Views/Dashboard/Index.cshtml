@model CompanyPhonebook.Models.DashboardViewModel

@{
    ViewData["Title"] = "Dashboard";
    var searchQuery = Context.Request.Query["searchQuery"];
    int pageSize = 3; // Items per page
    int currentPage = string.IsNullOrEmpty(Context.Request.Query["page"]) ? 1 : int.Parse(Context.Request.Query["page"]);
    int totalDepartments = Model.Departments.Count(d => string.IsNullOrEmpty(searchQuery) || (d.Name ?? string.Empty).Contains(searchQuery, StringComparison.OrdinalIgnoreCase));
    int totalUsers = Model.Users.Count(u => string.IsNullOrEmpty(searchQuery) ||
        (u.FirstName ?? string.Empty).Contains(searchQuery, StringComparison.OrdinalIgnoreCase) ||
        (u.LastName ?? string.Empty).Contains(searchQuery, StringComparison.OrdinalIgnoreCase) ||
        (u.Department != null && (u.Department.Name ?? string.Empty).Contains(searchQuery, StringComparison.OrdinalIgnoreCase)));
    int totalPagesDepartments = (int)Math.Ceiling((double)totalDepartments / pageSize);
    int totalPagesUsers = (int)Math.Ceiling((double)totalUsers / pageSize);

    // Paginate the filtered departments and users
    var filteredDepartments = Model.Departments
        .Where(d => string.IsNullOrEmpty(searchQuery) || (d.Name ?? string.Empty).Contains(searchQuery, StringComparison.OrdinalIgnoreCase))
        .Skip((currentPage - 1) * pageSize)
        .Take(pageSize)
        .ToList();

    var filteredUsers = Model.Users
        .Where(u => string.IsNullOrEmpty(searchQuery) ||
                    (u.FirstName ?? string.Empty).Contains(searchQuery, StringComparison.OrdinalIgnoreCase) ||
                    (u.LastName ?? string.Empty).Contains(searchQuery, StringComparison.OrdinalIgnoreCase) ||
                    (u.Department != null && (u.Department.Name ?? string.Empty).Contains(searchQuery, StringComparison.OrdinalIgnoreCase)))
        .Skip((currentPage - 1) * pageSize)
        .Take(pageSize)
        .ToList();
}

<h2 class="mb-4 text-center">Dashboard</h2>

<!-- 🔍 Search Form and Back to Home Button -->
<div class="d-flex justify-content-between mb-4">
    <form asp-action="Index" method="get" class="d-flex w-50 mx-auto">
        <input type="text" name="searchQuery" class="form-control" placeholder="Search Departments or Employees..." value="@searchQuery" />
        <button type="submit" class="btn btn-primary ms-2">Search</button>
    </form>

    <a asp-action="Index" asp-controller="Home" class="btn btn-secondary ms-2">🏠 Back to Home</a>
</div>

<!-- 📊 Summary Section -->
<div class="row mb-4">
    <div class="col-md-6 col-lg-4">
        <a asp-action="Index" asp-controller="Department" class="card-link">
            <div class="card shadow-sm text-center">
                <div class="card-body">
                    <h4 class="card-title">Total Departments</h4>
                    <p class="display-6 text-primary fw-bold">@Model.TotalDepartments</p>
                </div>
            </div>
        </a>
    </div>

    <div class="col-md-6 col-lg-4">
        <a asp-action="Index" asp-controller="User" class="card-link">
            <div class="card shadow-sm text-center">
                <div class="card-body">
                    <h4 class="card-title">Total Employees</h4>
                    <p class="display-6 text-success fw-bold">@Model.TotalUsers</p>
                </div>
            </div>
        </a>
    </div>
</div>

<!-- 🔄 Departments & Users Side by Side -->
<div class="row">
    <!-- 🏢 Departments Section -->
    <div class="col-md-6">
        <h3>Departments</h3>
        <div class="row">
            @if (filteredDepartments.Any())
            {
                @foreach (var department in filteredDepartments)
                {
                    <div class="col-md-12 mb-3">
                        <div class="card shadow-sm">
                            <div class="card-body">
                                <h5 class="card-title">@department.Name</h5>
                                <p class="card-text">📞 Department Extension: @department.PhoneExtension</p>
                                <p class="card-text">👥 Users: <span class="badge bg-secondary">@department.Users.Count</span></p>
                            </div>
                        </div>
                    </div>
                }
            }
            else
            {
                <div class="col-12 text-center text-muted">
                    <p>No departments available.</p>
                </div>
            }
        </div>

        <!-- Pagination Controls for Departments -->
        <nav>
            <ul class="pagination justify-content-center">
                <li class="page-item @(currentPage == 1 ? "disabled" : "")">
                    <a class="page-link" href="?searchQuery=@searchQuery&page=@(currentPage - 1)" tabindex="-1">Previous</a>
                </li>
                <li class="page-item @(currentPage == totalPagesDepartments ? "disabled" : "")">
                    <a class="page-link" href="?searchQuery=@searchQuery&page=@(currentPage + 1)">Next</a>
                </li>
            </ul>
        </nav>
    </div>

    <!-- 👥 Users Section -->
    <div class="col-md-6">
        <h3>Users</h3>
        <div class="row">
            @if (filteredUsers.Any())
            {
                @foreach (var user in filteredUsers)
                {
                    <div class="col-md-12 mb-3">
                        <div class="card shadow-sm">
                            <div class="card-body">
                                <h5 class="card-title">@user.FirstName @user.LastName</h5>
                                <p class="card-text">📧 @user.Email</p>
                                <p class="card-text">🏢 Department: @(user.Department?.Name ?? "No Department")</p>
                                <p class="card-text">📞 Direct Extension: @user.ExtensionNumber</p>
                            </div>
                        </div>
                    </div>
                }
            }
            else
            {
                <div class="col-12 text-center text-muted">
                    <p>No users available.</p>
                </div>
            }
        </div>

        <!-- Pagination Controls for Users -->
        <nav>
            <ul class="pagination justify-content-center">
                <li class="page-item @(currentPage == 1 ? "disabled" : "")">
                    <a class="page-link" href="?searchQuery=@searchQuery&page=@(currentPage - 1)" tabindex="-1">Previous</a>
                </li>
                <li class="page-item @(currentPage == totalPagesUsers ? "disabled" : "")">
                    <a class="page-link" href="?searchQuery=@searchQuery&page=@(currentPage + 1)">Next</a>
                </li>
            </ul>
        </nav>
    </div>
</div>

<!-- Floating Buttons for Admins -->
@if (User.IsInRole("Admin"))
{
    <a asp-action="Create" asp-controller="Department" class="btn btn-success fab create-btn">
        ➕ Create New Department
    </a>

    <a asp-action="Create" asp-controller="User" class="btn btn-primary fab2">➕ Add User</a>
}
